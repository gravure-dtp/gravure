Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-06-04T11:34:09.534023

====== GRAVURE A FREE RIP SOFTWARE ======


__Setting up libpaper1:amd64 (1.1.24+nmu2) ...__
__Creating config file /etc/papersize with new version__


moap swiss army knife for project maintener


Pydb is a command-line debugger for Python. It is based on the standard Python debugger pdb, but has a number of added features. Particularly, it is suitable for use with DDD, a graphical debugger front end.

PyPy is a fast, compliant alternative implementation of the Python language (2.7). It has several advantages and distinct features: Speed: thanks to its Just-in-Time compiler (on x86), Python programs often run faster on PyPy. Memory usage: large, memory-hungry Python programs might end up taking less space than they do in CPython. Compatibility: PyPy is highly compatible with existing Python code. It supports ctypes and can run popular Python libraries like twisted and django. Stackless: PyPy can be configured to run in stackless mode, providing micro-threads for massive concurrency.
This package contains the PyPy interpreter.

This package provides additional functions to Python's distutils and setuptools. It allows you to easily integrate gettext, icons and GNOME documentation into your build and installation process.
It also provides an "auto" module which provides a "do what I mean" automatic build system; if you stick to the conventions, you do not need to write setup.cfg, POTFILES.in, or MANIFEST.in, and setup.py just needs to have the package metadata (such as project name and version).

ExactImage is a fast C++ image processing library. Unlike many other library frameworks it allows operation in several color spaces and bit depths natively, resulting in low memory and computational requirements.
This package contains the Python bindings.

Fault handler for SIGSEGV, SIGFPE, SIGBUS and SIGILL signals: it displays the Python backtrace and restores the previous handler. It allocates an alternate stack for this handler, if signaltstack() is available, to be able to allocate memory on the stack, even on stack overflow.

Python bindings to the FFTW3 "Fastest Fourier Transform in the West." C-library (http://www.fftw.org/) for computing discrete Fourier transforms. PyFFTW are Python bindings for the FFTW3 C-routines, using numpy and ctypes. It includes a somewhat pythonic interface to the FFTW routines, but leaves the concept of creating plans and executing these plans intact.
